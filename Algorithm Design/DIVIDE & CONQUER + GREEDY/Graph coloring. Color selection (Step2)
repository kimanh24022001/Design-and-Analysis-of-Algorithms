ĐỀ BÀI: Cho một đồ thị đang được tô màu dang dở, hãy thực hiện việc chọn màu để tiếp tục tô cho đồ thị. Màu được sử dụng là hệ màu 
RGB 24 bit với tối đa hơn 16 triệu màu, các màu được đánh số từ 0 (màu đen #000000) đến 16777215 (màu trắng #FFFFFF).

 

Quy định là khi tô thì đỉnh không được trùng màu với các đỉnh lân cận của nó. Khi chọn màu chỉ được sử dụng các màu đã tô trước đó, 
trừ khi những đỉnh lân cận với đỉnh cần tô đã chiếm hết những màu đã sử dụng trước thì mới được chọn màu mới. Khi tô màu dù là các
màu đã có hay chọn màu mới, luôn chọn màu có thứ tự nhỏ nhất có thể chọn được.

 

 

INPUT:

Dòng đầu tiên chứa 03 số v, e, n đây lần lượt là số đỉnh, số cạnh của đồ thị và số lượng đỉnh cần xem xét.

Dòng tiếp theo chứa v chuỗi, mỗi chuỗi bao một hoặc nhiều ký tự hoa trong bảng chữ cái Tiếng Anh và cách nhau bởi khoảng trắng. 
Đây là danh sách tên các đỉnh của đồ thị.

e dòng tiếp theo, mỗi dòng chứa 02 chuỗi u và i (cách nhau bởi khoảng trắng), thể hiện việc có một cạnh nối giữa đỉnh u và đỉnh i
trong đồ thị.

Dòng áp chót trong input chứa v số nguyên, đây tương ứng là màu của các đỉnh đã tô. Số nguyên đầu tiên là màu của đỉnh đầu tiên, 
đỉnh chưa tô màu sẽ có số tương ứng là -1

Dòng cuối cùng trong input chứa n chuỗi, đây là các đỉnh mà người chơi đang muốn xem xét để chọn màu.

 

OUTPUT:

Ứng với mỗi đỉnh cần xem xét thực hiện yêu cầu sau:
Nếu đỉnh đã có màu, kiểm tra màu đó có trùng với màu của các đỉnh lân cận hay không. Nếu không trùng xuất ra chuỗi TRUE trên một dòng

Nếu đỉnh chưa có màu hoặc đã có nhưng màu đó trùng với màu của một hoặc nhiều đỉnh lân cận thì chọn màu cho đỉnh theo đúng quy tắc và xuất ra màu đó trên một dòng.

 

Yêu cầu xem xét được thực hiện độc lập cho mỗi đỉnh. Kết quả xem xét các đỉnh trước hoàn toàn không ảnh hưởng gì đến các đỉnh sau. 

GIẢI THÍCH THÊM THEO YÊU CẦU CỦA SV: 

- Khi chọn màu chỉ được sử dụng các màu đã tô trước đó (có thể không bắt đầu từ 0). Khi tô màu dù là các màu đã có hay chọn màu mới, luôn chọn màu có thứ tự nhỏ nhất có thể chọn được.

VD: màu đã sử dụng = {2,3,4}. Khi thử tô lại màu đã sử dụng thì thử bắt đầu từ màu 2. Nếu thử hết các màu trên mà ko được thì phải tô màu mới, nhưng màu mới phải là màu có thứ tử nhỏ nhất có thể chọn được tức là màu 0.

- Theo VD 1, xét các đỉnh độc lập nghĩa là: sau khi tô màu cho đỉnh H xong thì bài toán quay trở lại trạng thái như ban đầu, các màu được tô (0 -1 0 -1 -1)

- Ứng với mỗi đỉnh cần xem xét thực hiện yêu cầu sau:
     + Nếu đỉnh đã có màu và tô đúng thì xuất TRUE. 

     + Nếu đỉnh chưa có màu  thì tô nó. 

     +Nếu đỉnh đã tô  nhưng tô sai thì tô lại "Theo ví dụ 2: RU kề nhau nhưng tô cùng màu 1 là sai.


#include <iostream>
#include <cstring>

using namespace std;
int choose_color( int s,int v,int color[1000], int a[1000][1000] ){
int Mini=99999999;
    for (int i=0;i<v;i++){
    	if (color[i]!=-1){
             int OK = true;
            for (int j=0;j<v;j++){
                if ( a [j][s]==1 && color[j]== color[i]  && s!=j ) {
                    OK = false; 
                    break;
                }
            }
                if (OK==true)   
                {
                    if (Mini>=color[i]){
                    	Mini=color[i];
                    }
                }
       } 
    }
    if (Mini!=99999999){
    	return Mini;
    }
    int newColor=0;
    while (newColor<=16777215 ){
    	int flag=0;
    	for (int i=0;i<v;i++){
    		if (newColor==color[i]){
    			flag=1;
    		}
    	}
    	if (flag==0){
    		return newColor;
    		}
    	newColor++;
    //	break;
    }

}
int mistakColor(int i,int v,int color[1000], int a[1000][1000]){
	for (int j=0;j<v;j++){
                if ( a [j][i]==1 && color[j]== color[i] && i!=j ) {
                    return -1; 
                    break;
                }
            }
    return 1;
}
int main() {
	int v,e,n,arr[1000][1000],color[1000];
	string  c[1000],point[1000],a,b;
	cin>>v>>e>>n;
	for (int i=0;i<v;i++){
		cin>>c[i];
	}
	for (int i=0;i<v;i++){
		for (int j=0;j<v;j++){
			arr[i][j]=0;
		}
	}
	for (int j=0;j<e;j++){
		int x,y;
		cin>>a>>b;
		for (int i=0;i<v;i++){
	     	if (c[i]==a){
		        x=i;
	     	}
	     	if (c[i]==b){
		        y=i;
	     	}
           	}
        arr[x][y]=1;
        arr[y][x]=1;
	}
	for (int i=0;i<v;i++){
		cin>>color[i];
	}
	int s=0;
	for (int i=0;i<n;i++){
		cin>>point[i];
		for (int j=0;j<v;j++){
			if(point[i]==c[j]){
				s=choose_color( j,v,color,arr );
				if ((mistakColor(j,v,color,arr)==1) && ((color[j]!=-1) || color[j]==s)){
			           cout<<"TRUE"<<endl;
				  }
				else{
					cout<<s<<endl;
				}
				break;
			}
		}
	}
   
	return 0;
}
