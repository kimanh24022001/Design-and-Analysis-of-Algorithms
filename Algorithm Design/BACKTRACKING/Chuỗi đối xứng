DỀ BÀI: Cho một chuỗi s, hãy tìm tất cả các cách chia chuỗi s thành các chuỗi con sao cho tất cả chuỗi con đều là chuỗi đối xứng (palindrome)

INPUT

Chuỗi s không chứa khoảng trắng, không quá 100 ký tự.

OUTPUT

Với mỗi cách chia chuỗi s thành những chuỗi con, xuất ra các chuỗi con này trên cùng một dòng cách nhau bởi khoảng trắng. 
Các chuỗi con phải được xuất theo đúng thứ tự chúng xuất hiện trong chuỗi s. Thứ tự xuất các cách chia là không quan trọng, hệ thống chấm được hết)

#include <iostream>
#include <math.h>
#include <string.h>

using namespace std;
int n,beg[100],fin[100],count=0;
char String[100], s[100][100],a[100];
bool isPalindrome(char s[100],int beg, int fin){

	bool kiemTra = 1;
	char kiTu[100];
	int m=0;
	for (int i=beg;i<=fin;i++){
		kiTu[m]=s[i];
		m++;
	}

    for(int i=0; i<m/2; i++)
        if(kiTu[i] != kiTu[m-i-1]) {
            return 0;
            kiemTra = 0;
            break;
        }
    if(kiemTra) return 1;
}
void slice(char s[100],char String[100],int j,int kt,int n){
	int m=0;
	for (int i=0;i<n;i++){
		s[m]=' ';
		m++;
	}
	m=j;
	for (int i=j;i<=kt;i++){
		s[m]=String[i];
		m++;
	}
}
void palindrome(int i,int k){
	for ( int t=n;t>=1;t--){
		    int j=k+1;
            if ((j+t-1<=n-1) && (isPalindrome(String,j,j+t-1)==1)){
               slice(s[i],String,j,j+t-1,n);
               beg[i]=j;
               fin[i]=j+t-1;
               count+=fin[i]-beg[i]+1;
        
		       if (j+t-1==n-1)  {
		       	  	for (int m=0;m<=i;m++){
		       	    		for (int h=beg[m];h<=fin[m];h++){
		       	                  cout<<s[m][h];
		       	    		}
		       	    		cout<<" ";
		       	    	}
		       	    	 cout<<"\n";
		       	    }
		      
	        	else{
		        	palindrome(i+1,j+t-1);
		        	}
		          count-=fin[i]-beg[i]+1;
               }
	   
	}
}
int main() {
	cin>>String;
	n=strlen(String);
//	cout<<isPalindrome(String,0,n);
	palindrome(0,-1);
	return 0;
}
